<analysis>
The trajectory details an intensive, iterative development process for OMERTA, an E2EE mobile messaging app, focusing on extreme security. The AI engineer initiated by confirming product requirements, which evolved significantly throughout the conversation. Early efforts focused on establishing a robust, RAM-only backend and implementing core security features like anti-screenshot, PIN gates, and interim encrypted messaging.

A major turning point involved the user's demand for a 100/100 security score, which exposed a critical flaw in the AI's initial assessment of rate limiting due to the Kubernetes proxy environment. This led to a re-evaluation and implementation of real-world security measures, including Redis-backed rate limiting, exponential backoff for brute force, and a complete overhaul of the duress protection (Panic PIN and a new Emergency NUKE button) to use automatic signed kill tokens and a fake Android interface.

The user then emphasized the integration of The Bird (cryptgeon-style one-time links) with Sealed Sender (Signal Protocol) into a unified STEELOS SECURE protocol, making every message ephemeral and metadata-protected. The AI successfully implemented this, adding auto-destruct timers and voice notes with a voice changer. The final messages focus on advanced anti-forensics (OMG cable/Cellebrite protection) and disguised app icons, indicating a shift towards extreme stealth and hardware-level attack mitigation.
</analysis>

<product_requirements>
The user wants OMERTA (aka STEELOS SECURE), an E2EE mobile messaging app with paramount security, privacy, and anti-surveillance.
**Key Features & Principles:**
*   **E2EE Messaging:** Full Signal Protocol (X3DH, Double Ratchet, PFS, post-compromise security) with Sealed Sender for metadata protection.
*   **STEELOS SECURE Protocol:** A combined system where every message is wrapped in cryptgeon-style ephemeral encryption (The Bird), delivered via Sealed Sender, requires a tap to open, is 1-time read, and self-destructs via an adjustable timer (30s-1 week). Voice notes with optional voice changer are included.
*   **Ephemeral Notes (Cryptgeon-style):** Client-side AES-256-GCM, RAM-only server, keys in URL fragment, strictly 1-time view, TTL up to one week.
*   **Secure Vault:** Password-locked (Argon2id KDF), hardware-backed AES key (Android Keystore), no clipboard persistence (auto-clears 10s/background).
*   **Global Anti-Screenshot:**  app-wide; clear memory/notify on attempt.
*   **Wipe Capabilities:**
    *   **Panic PIN (911911):** Triggers automatic signed kill token, silent secure self-wipe (local data, keys), presents a fake UI, then auto-executes OS factory reset.
    *   **Emergency NUKE Button:** 7-tap fast activation within chat, triggers same signed kill token and automatic wipe.
    *   **Remote Wipe:** Signed kill-token via push/Firebase for secure self-wipe and OS factory reset.
*   **Identity & Discovery:** OMERTA ID (OID), in-person QR scan for contact verification (no copy/invite links), Verified Contact badge.
*   **Storage & Network:** RAM-only server for ephemeral data, short TTLs. Tor mode (messaging/notes). WebSocket real-time delivery with polling fallback.
*   **Update Integrity:** Threshold-signed releases, transparency log.
*   **UI/UX:** WhatsApp/Signal-like chat, Dark theme (graphite/black with silver/chrome accents, red accents for OMERTA logo). Stealth OMERTA mark. Disguised app icons (e.g., bicycle/heart/Google-like).
*   **Anti-Forensics:** Detect OMG Cable/Cellebrite via non-power block charger detection, trigger auto-signed kill token (auto-nuke) upon detection.
*   **Encrypted Pictures:** Need discussion on how pictures are saved and encrypted.
</product_requirements>

<key_technical_concepts>
- **E2EE Protocols:** Signal Protocol (X3DH, Double Ratchet, Sealed Sender), AES-256-GCM.
- **Key Derivation:** Argon2id, HKDF-SHA384.
- **Real-time Communication:** WebSockets, WebRTC.
- **Client-Side:** Expo (React Native), , Zustand, , .
- **Backend:** FastAPI (Python), Redis (for rate limiting), SlowAPI, Bleach.
- **Security:** TOTP, client fingerprinting, exponential backoff, signed kill tokens.
- **File System:** , .
</key_technical_concepts>

<code_architecture>
The application uses an Expo React Native frontend, a FastAPI backend, and utilizes RAM-only storage for ephemeral data, with Redis introduced for robust rate-limiting.

**Directory Structure:**


**Key Files and Changes:**

*   **/app/backend/server.py**: FastAPI backend. Now includes comprehensive rate limiting using  and Redis, integrated input sanitization with , and security headers. WebSocket error handling improved. , ,  endpoints are protected.
*   **/app/backend/security_engine.py**: **NEW FILE**. Implements real-world rate limiting that works behind proxies by utilizing a client fingerprint (IP + User-Agent) and Redis. Includes  to block requests.
*   **/app/backend/pin_security.py**: **NEW FILE**. FastAPI router for PIN-related security. Includes brute-force protection with exponential backoff and logic for processing panic PIN requests, triggering silent wipes with signed kill tokens.
*   **/app/frontend/metro.config.js**: Updated to resolve WASM file types for libraries like .
*   **/app/frontend/src/theme/colors.ts**: Updated to include  for the OMERTA logo and definitions for light theme colors (black/white/silver/graphite palette).
*   **/app/frontend/src/state/theme.ts**: Modified to manage theme mode (Dark/Light/System) and accent colors, supporting the new theme.
*   **/app/frontend/src/utils/crypto.ts**: Enhanced error handling for  WASM loading failures, gracefully falling back to PBKDF2.
*   **/app/frontend/src/utils/signalCrypto.ts**: **NEW FILE (significantly updated)**. Implements the full Signal Protocol (X3DH, Double Ratchet) and Sealed Sender. Manages identity, prekeys, sessions, and provides  and  functions for the combined STEELOS SECURE protocol.
*   **/app/frontend/src/utils/remoteSecurity.ts**: **NEW FILE**. Manages remote wipe commands, including sending signed kill tokens for panic PIN and emergency NUKE.
*   **/app/frontend/src/utils/antiForensics.ts**: **NEW FILE**. Scaffolding for detecting OMG Cable/Cellebrite and triggering auto-nuke.
*   **/app/frontend/app/(tabs)/chats/index.tsx**: Updated to integrate the OMERTA logo in the header and apply theme colors for Secure Note cards and general UI.
*   **/app/frontend/app/chat/[id].tsx**: Central to messaging. Now wraps the chat interface with  component. Message sending/receiving logic updated to use  for STEELOS SECURE protocol (cryptgeon-wrapped messages delivered via Sealed Sender). Includes the timer for auto-destructing messages.
*   **/app/frontend/src/components/OmertaLogo.tsx**: **NEW FILE**. Displays the OMERTA logo with red accents, security symbolism, and STEELOS SECURE branding, adapting to different sizes.
*   **/app/frontend/src/components/EmergencyNuke.tsx**: **NEW FILE**. A hidden component that appears after 7 fast taps, providing a NUKE NOW button to trigger an emergency wipe.
*   **/app/frontend/src/components/FakeAndroidInterface.tsx**: **NEW FILE**. A component that renders a realistic, browsable fake Android home screen with fake apps, contacts, and photos, used to deceive attackers during a wipe sequence.
*   **/app/frontend/src/components/DisguisedAppIcon.tsx**: **NEW FILE**. Scaffolding for changing the app icon to a disguised symbol (e.g., bicycle, heart, G for Google).
</code_architecture>

<pending_tasks>
- **Calls phase:** Integrate LiveKit SFU, voice scrambler, avatar overlay, and face blur features.
- **Transparency log client hooks:** Implement verification for threshold-signed updates.
- **Legal documentation and whitepaper:** Integrate into the app.
- **Donations area:** Add crypto wallet address.
- **First-use tutorial:** Implement coach marks.
- **Full light theme palette:** Apply chrome accents to all light theme UI elements.
- **Encrypted Picture Storage:** Discuss and implement how pictures are saved and encrypted within the STEELOS SECURE protocol.
- **Complete Anti-Forensics Implementation:** Fully wire up detection for OMG Cable/Cellebrite and trigger auto-nuke.
</pending_tasks>

<current_work>
Immediately before this summary, the AI engineer was addressing advanced security and stealth features requested by the user, having just achieved a 100/100 security rating for the core messaging.

The primary focus was on implementing **Anti-Forensics & Cable Exploit Protection** against threats like the OMG Cable and Cellebrite. This involves detecting non-power block chargers or suspicious cable activity to automatically trigger a signed kill token and an auto-nuke (wipe) of the device. The AI engineer has just created the  file as a starting point for this detection logic.

Concurrently, the AI engineer was also working on the **Disguised App Icons** feature, which allows the app icon to be changed to something innocuous (e.g., a bicycle, heart, or a Google-like 'G' symbol with Omerta's 'O'). The  component has been created for this purpose.

Finally, the user raised questions regarding **Encrypted Picture Storage** within the STEELOS SECURE context, which the AI engineer was about to discuss and address, posing a new task to integrate picture handling securely within the established ephemeral and encrypted messaging framework.
</current_work>

<optional_next_step>
Discuss encrypted picture storage, then implement the full anti-forensics protection.
</optional_next_step>
